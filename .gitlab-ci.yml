stages:
  - deploy

#gitlab cicd variables에 등록한 변수들을 $와 함께 사용할 수 있움
variables:
  AWS_EB_APP_NAME: $MY_AWS_EB_APP_NAME
  AWS_EB_ENV_NAME: $MY_AWS_EB_ENV_NAME
  APP_VERSION: "1.0.0"
  S3_BUCKET: $AWS_S3_EB_BUCKET
  AWS_ACCESS_KEY_ID: $MY_AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $MY_AWS_SECRET_ACCESS_KEY
  AWS_REGION: $AWS_REGION
  AWS_PLATFORM: Node.js


deploy_eb:
  stage: deploy
  image: node:latest

  allow_failure: false
  

  script: |
    echo "########################################################"
    echo "#####create elastic beanstalk application(version)######"
    echo "########################################################"
    echo $AWS_EB_APP_NAME
    echo $AWS_EB_ENV_NAME 
    echo $APP_VERSION
    echo $S3_BUCKET
    echo $AWS_ACCESS_KEY_ID
    echo $AWS_SECRET_ACCESS_KEY
    echo $AWS_REGION
    echo $AWS_PLATFORM

    echo "setting environmnet variable"
    export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}  
    export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    export AWS_DEFAULT_REGION=${AWS_REGION}
    
    echo -e "section_start:`date +%s`:start[collapsed=true]\r\e[0K Creating zip file" 
    npm install --production=false
    npm run build
    mkdir -p deploy
    cp -r dist/* deploy
    cp ~/ordinal-door-395311-9449ed456884.json deploy/ordinal-door-395311-9449ed456884.json
    cp package.json deploy/package.json
    cp Procfile deploy/Procfile
    cp -r .platform deploy/.platform
    cp -r swagger deploy/swagger
    cd deploy
    zip -r ${AWS_EB_APP_NAME}.zip .
    echo -e "section_end:`date +%s`:zipped\r\e[0K]"
    echo "Creating AWS Version Label"
    AWS_VERSION_LABEL=${AWS_EB_APP_NAME}-${APP_VERSION}-${CI_COMMIT_SHORT_SHA} 
    S3_KEY="resources/$AWS_VERSION_LABEL.zip" 

    echo "Uploading to S3"
    aws s3 cp ${AWS_EB_APP_NAME}.zip s3://${S3_BUCKET}/${S3_KEY} --region $AWS_REGION

    echo "Creating new app version" 
    aws elasticbeanstalk create-application-version \
      --application-name ${AWS_EB_APP_NAME} \
      --version-label $AWS_VERSION_LABEL \
      --region $AWS_REGION \
      --source-bundle S3Bucket=${S3_BUCKET},S3Key=${S3_KEY} \
      --description "${CI_COMMIT_DESCRIPTION}" \
      --auto-create-application 
    
    aws elasticbeanstalk update-environment --environment-name ${AWS_EB_ENV_NAME}  --version-label $AWS_VERSION_LABEL

    echo "########################################################"
    echo "######deploy elastic beanstalk application(version)#####"  
    echo "########################################################"

    export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} 
    export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}    
    export PATH=~/.local/bin:$PATH
    echo "Environment status':' `aws elasticbeanstalk describe-environments --environment-names ${AWS_EB_ENV_NAME}  | grep '"Status"' | cut -d':' -f2  | sed -e 's/^[^"]*"//' -e 's/".*$//'`"
    echo "eb init start"
    eb init -i ${AWS_EB_APP_NAME} -p ${AWS_PLATFORM} -k srKey1.pem --region ${AWS_REGION}
    echo "Your environment is currently updating"; while [[ `aws elasticbeanstalk describe-environments --environment-names ${AWS_EB_ENV_NAME} | grep '"Status"' | cut -d':' -f2  | sed -e 's/^[^"]*"//' -e 's/".*$//'` = "Updating" ]]; do sleep 20; printf "."; done
    
    echo "eb deploy start"
    eb deploy -l $AWS_VERSION_LABEL -v
    
  only:
    refs:
      - production
  tags:
    - safe-roadmap